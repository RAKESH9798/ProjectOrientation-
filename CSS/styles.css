/* Agenda:
-CSS Introduction: css stands for cascading style sheets used for styling the html and layout of webpage.

-Applying css: There are three ways to styling the css 1. within style tag, 2.internal css, 3. external css.

1.Applying css using style tag: it is used within head tag of html.
<html>
<head>
<style>
selectors{
properties:value;
}
<style/>
<head/>
<body>
-------content-------
<body/>
<html/>

2.internal css: styling within the written section or content.

1.Applying css using style tag: it is used within head tag of html.
<html>
<head>
</head>
<body>
-------content-------
<p style="color:red;">Styled using internal css<p/>
</body>
</html>

3. external css: styling in other file based on selectors, Here we have to use link tag to add external css file.

<html>
<head>
<link relationship="stylesheet" src="./external.css"/>
</head>
<body>
-------content-------
<p style="color:red;">Styled using internal css</p>
</body>
</html>

//external.css
p{
color:red;
}

-Selectors : id selectors used with (#) keyword, class selectors used with (.) keyword, tag selectors.

<html>
<head>
<style>
#paragraph{
color:red;
}

.paragraph{
color:blue;
}

p{
color:yellow;
}
</style>
</head>
<body>
-------content-------
<p id="paragraph">Styled using internal css</p>
    <p class="paragraph">Styled using internal css</p>
        <p>Styled using internal css</p>
</body>
</html>

-Specificity: id>class>selectors.
<p id="paragraph" class="paragraph">#paragraph>.paragraph>p</p>

-Box Model:padding,margin,border.

<html>
<head>
<style>
.container{
    width: 300px;
    height: 300px;
    background-color: blue;
    border: 5px solid red;
    padding: 20px 30px 40px 50px;
    margin: 20px 30px 40px 50px;
}
</style>
<title>css</title>
</head>
<body>
-------content-------
<div class="container">
    <p id="paragraph" class="paragraph">#id>.class>tag</p>
</div>
</body>
</html>

-CSS Variables: --bgcolor(red);

html{
        --bgcolor:red;// global variable declaration
    }
.container{
    width: 300px;
    height: 300px;
    background-color: blue;
    border: 5px solid var(--bgcolor);//css variable used
    padding: 20px 30px 40px 50px;
    margin: 20px 30px 40px 50px;
}


-Calc: used for calculation like color:calc(2*20px);

    html{
        --bgcolor:red;
        --standradfontsize:20px;
    }
.container{
    width: 300px;
    height: 300px;
    background-color: blue;
    border: 5px solid var(--bgcolor);
    padding: 20px 30px 40px 50px;
    margin: 20px 30px 40px 50px;
}

p{
    font-size: calc(2*var(--standradfontsize));
}


-Pseudo Selectors: it is written by using colon(:) like tag:focus{----},etc.

<!DOCTYPE html>
<html>
<head>
  <title>Paragraph Issue</title>
  <style>
    p {
        display: none;
      }
      input:focus+.paragraph{
          display: block;
      }
    </style>
  </head>
  <body>
      <input type="text">
    <p class="paragraph">This is a paragraph.</p>
  </body>
  </html>
  


-Pseudo Elements: it is written by using doublecolon(::) selectors::after{----}.

<!DOCTYPE html>
<html>
<head>
  <title>Paragraph Issue</title>
  <style>
    p {
      display: none;
    }
    input:focus+.paragraph{
        display: block;
    }
    p::after{
        content: "Enter Your name";
        color: red;
    }
  </style>
</head>
<body>
    <input type="text">
  <p class="paragraph"></p>
</body>
</html>



-Attr: The attr() function can be used to retrieve the value of an attribute and use it in CSS.


<!DOCTYPE html>
<html>
<head>
<title>Attr Function</title>
<style>
  a::after {
    content: attr(href);
    font-size: 12px;
    color: gray;
  }
</style>
</head>
<body>
<a href="https://www.example.com">Visit Example</a>
</body>
</html>


-Tailwind CSS -- Only CDN: Tailwind CSS is a utility-first CSS framework. It can be included via CDN for quick setup.


<html>
<head>
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body>
<div class="bg-blue-500 text-white p-4">
  This is a Tailwind CSS component.
</div>
</body>
</html>


-Flexbox: A layout model for creating flexible and responsive layouts.


<html>
<head>
<style>
  .container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
  }
  .box {
    background-color: lightcoral;
    padding: 20px;
    margin: 10px;
  }
</style>
</head>
<body>
<div class="container">
  <div class="box">Box 1</div>
  <div class="box">Box 2</div>
  <div class="box">Box 3</div>
</div>
</body>
</html>


-Grid: A layout system for creating grid-based designs.

<html>
<head>
<style>
  .container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px;
  }
  .box {
    background-color: lightgreen;
    padding: 20px;
  }
</style>
</head>
<body>
<div class="container">
  <div class="box">Box 1</div>
  <div class="box">Box 2</div>
  <div class="box">Box 3</div>
</div>
</body>
</html>


-Webkit: WebKit-specific CSS properties and prefixes for cross-browser compatibility.

--Example of WebKit-specific properties
.container {
    -webkit-border-radius: 10px;
    border-radius: 10px;
    -webkit-box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
  }
  -
  , ::after, content, etc.: Discuss specific pseudo-classes and pseudo-elements like :focus and ::after.
  

  <!DOCTYPE html>
  <html>
  <head>
  <title>Focus and After</title>
  <style>
    input:focus {
      border-color: blue;
    }
    p::after {
      content: " More content";
      color: red;
    }
  </style>
  </head>
  <body>
  <input type="text">
  <p>This is a paragraph.</p>
  </body>
  </html>
  

 */
